{
  "name": "@sovereign-seas/hardhat",
  "license": "MIT",
  "version": "1.0.0",
  "devDependencies": {
    "@nomicfoundation/hardhat-chai-matchers": "^2.0.0",
    "@nomicfoundation/hardhat-ethers": "^3.0.0",
    "@nomicfoundation/hardhat-ignition": "^0.15.5",
    "@nomicfoundation/hardhat-ignition-ethers": "^0.15.0",
    "@nomicfoundation/hardhat-network-helpers": "^1.0.11",
    "@nomicfoundation/hardhat-toolbox": "^5.0.0",
    "@nomicfoundation/hardhat-verify": "^2.0.11",
    "@nomicfoundation/ignition-core": "^0.15.5",
    "@nomiclabs/hardhat-ethers": "^2.2.3",
    "@typechain/ethers-v6": "^0.5.0",
    "@typechain/hardhat": "^9.1.0",
    "@types/chai": "^4.3.16",
    "@types/mocha": "^10.0.7",
    "@types/node": "^22.15.21",
    "chai": "^4.2.0",
    "chain": "^0.4.0",
    "hardhat": "^2.22.15",
    "hardhat-gas-reporter": "^1.0.8",
    "solidity-coverage": "^0.8.1",
    "ts-node": "^10.9.2",
    "typechain": "^8.3.2",
    "typescript": "^5.5.3"
  },
  "dependencies": {
    "@openzeppelin/contracts": "^5.4.0",
    "@openzeppelin/contracts-upgradeable": "^5.4.0",
    "@openzeppelin/hardhat-upgrades": "^3.9.1",
    "dotenv": "^16.4.5",
    "ethers": "^6.14.4",
    "viem": "^2.30.0"
  },
  "scripts": {
    "postinstall": "chmod +x sync-abis.js",
    "compile": "hardhat compile && node sync-abis.js",
    "tsc": "npx tsc -p . && cp typechain/*.d.ts dist/typechain/",
    "build": "pnpm run compile && pnpm run tsc",
    "clean": "hardhat clean",
    "run:node": "hardhat node",
    "test": "hardhat test",
    "test:gen-wallets": "ts-node scripts/tests/generate-wallets.ts 6",
    "test:deploy:seas": "hardhat run scripts/tests/deploy-seas.ts --network alfajores",
    "test:e2e:alfajores": "ts-node scripts/tests/e2e-alfajores.ts",
    "test:comprehensive": "ts-node scripts/tests/comprehensive-v5-test.ts alfajores",
    "test:comprehensive:skip": "ts-node scripts/tests/comprehensive-v5-test.ts alfajores --skip",
    "test:comprehensive:repeat": "ts-node scripts/tests/comprehensive-v5-test.ts alfajores --repeat",
    "test:dynamic": "ts-node scripts/tests/dynamic-v5-test.ts",
    "test:debug": "ts-node scripts/tests/debug-single-campaign.ts",
    "test:check-init": "ts-node scripts/tests/check-initialization.ts",
    "test:direct-module": "ts-node scripts/tests/test-direct-module-call.ts",
    "test:fresh": "ts-node scripts/tests/start-fresh-tests.ts",
    "test:fresh:basic": "ts-node scripts/tests/start-fresh-tests.ts alfajores basic",
    "test:fresh:comprehensive": "ts-node scripts/tests/start-fresh-tests.ts alfajores comprehensive",
    "test:new": "ts-node scripts/tests/new-test-runner.ts",
    "test:new:basic": "ts-node scripts/tests/new-test-runner.ts alfajores basic",
    "test:new:comprehensive": "ts-node scripts/tests/new-test-runner.ts alfajores comprehensive",
    "test:msg-sender": "ts-node scripts/tests/test-msg-sender-fix.ts",
    "test:simple-msg-sender": "ts-node scripts/tests/test-simple-msg-sender.ts",
    "test:real": "ts-node scripts/tests/real-test-runner.ts",
    "test:real:basic": "ts-node scripts/tests/real-test-runner.ts alfajores basic",
    "test:real:comprehensive": "ts-node scripts/tests/real-test-runner.ts alfajores comprehensive",
    "test:real:fresh": "ts-node scripts/tests/real-test-runner.ts alfajores comprehensive --fresh",
    "test:reset": "ts-node scripts/tests/reset-testing-environment.ts",
    "test:reset:all": "ts-node scripts/tests/reset-testing-environment.ts alfajores --all",
    "test:fund": "ts-node scripts/tests/fund-test-wallets.ts",
    "test:fund:alfajores": "ts-node scripts/tests/fund-test-wallets.ts alfajores 2 1000",
    "prettier": "prettier --write 'contracts/**/*.sol' '**/*.ts'",
    "transpile": "npx tsc -p .",
    "transpile:watch": "npx tsc -p . --watch",
    "build:full": "pnpm run compile && pnpm run transpile",
    "# Deployment Commands": "",
    "# V5 Proxy Deployment (SAFE for testing - defaults to testnet)": "",
    "deploy": "ts-node scripts/deploy.ts",
    "deploy:seas": "ts-node scripts/deploy.ts seas",
    "deploy:grants": "ts-node scripts/deploy.ts grants",
    "deploy:claims": "ts-node scripts/deploy.ts claims",
    "deploy:tips": "ts-node scripts/deploy.ts tips",
    "deploy:nft": "ts-node scripts/deploy.ts nft",
   
   
    
    "deploy:v5": "ts-node scripts/deploy-v5-proxy.ts alfajores",
    "deploy:v5:proxy": "ts-node scripts/deploy-v5-proxy.ts alfajores",
    "deploy:v5:mainnet": "ts-node scripts/deploy-v5-proxy.ts celo",
    "deploy:v5:testnet": "ts-node scripts/deploy-v5-proxy.ts alfajores",
    "deploy:v5:baklava": "ts-node scripts/deploy-v5-proxy.ts baklava",
    "deploy:v5:smart": "ts-node scripts/deploy-v5-smart.ts",
    "deploy:v5:smart:alfajores": "ts-node scripts/deploy-v5-smart.ts alfajores",
    "deploy:v5:smart:celo": "ts-node scripts/deploy-v5-smart.ts celo",
    "deploy:v5:enhanced": "ts-node scripts/deploy-v5-enhanced.ts",
    "deploy:v5:fresh": "ts-node scripts/deploy-fresh-enhanced.ts",
    "preserve-wallets": "ts-node scripts/preserve-test-wallets.ts preserve",
    "restore-wallets": "ts-node scripts/preserve-test-wallets.ts restore",
    "check:deployment": "ts-node scripts/check-deployment-status.ts",
    "check:deployment:alfajores": "ts-node scripts/check-deployment-status.ts alfajores",
    "check:deployment:celo": "ts-node scripts/check-deployment-status.ts celo",
    "# Migration Commands": "",
    "migrate:v4-to-v5": "ts-node scripts/migrate-v4-to-v5.ts alfajores",
    "migrate:v4-to-v5:testnet": "ts-node scripts/migrate-v4-to-v5.ts alfajores",
    "migrate:v4-to-v5:mainnet": "ts-node scripts/migrate-v4-to-v5.ts celo",
    "migrate:v4-to-v5:baklava": "ts-node scripts/migrate-v4-to-v5.ts baklava",
    "check:migration": "ts-node scripts/check-migration-status.ts alfajores",
    "check:migration:mainnet": "ts-node scripts/check-migration-status.ts celo",
    "fix:migration-roles": "ts-node scripts/fix-migration-roles-v2.ts",
    "redeploy:migration": "ts-node scripts/redeploy-migration-module.ts",
    "upgrade:v5-proxy": "ts-node scripts/upgrade-v5-proxy.ts",
    "# Safety & Network Commands": "",
    "check:network": "ts-node scripts/check-network.ts",
    "check:verification": "ts-node scripts/check-verification.ts",
    "# Verification Commands": "",
    "verify": "ts-node scripts/verify.ts",
    "verify:seas": "ts-node scripts/verify.ts seas",
    "verify:grants": "ts-node scripts/verify.ts grants",
    "verify:claims": "ts-node scripts/verify.ts claims",
    "verify:nft": "ts-node scripts/verify.ts nft",
    "verify:tips": "ts-node scripts/verify.ts tips",
    "verify:uniswap-proxy": "ts-node scripts/verify.ts uniswap-proxy",
    "verify:uniswap-v3-proxy": "ts-node scripts/verify.ts uniswap-v3-proxy",
    "verify:uniswap-v2-proxy": "ts-node scripts/verify.ts uniswap-v2-proxy",
    "verify:uniswap-factory": "ts-node scripts/verify.ts uniswap-factory",
    "verify:ubeswap-proxy": "ts-node scripts/verify.ts ubeswap-proxy",
    "verify:good-dollar-voter": "ts-node scripts/verify.ts good-dollar-voter",
    "verify:sovereign-voting": "ts-node scripts/verify.ts sovereign-voting",
    "verify:working-proxy": "ts-node scripts/verify.ts working-proxy",
    "verify:all-uniswap": "ts-node scripts/verify.ts all-uniswap",
    "verify:heyzo": "ts-node scripts/verify-heyzo.ts",
    "# V5 Verification Commands (Network-aware)": "",
    "verify:v5": "ts-node scripts/verify-v5-deployment.ts alfajores",
    "verify:v5:proxy": "ts-node scripts/verify-v5-deployment.ts alfajores",
    "verify:v5:testnet": "ts-node scripts/verify-v5-deployment.ts alfajores",
    "verify:v5:mainnet": "ts-node scripts/verify-v5-deployment.ts celo",
    "verify:v5:baklava": "ts-node scripts/verify-v5-deployment.ts baklava",
    "# Testing Commands": "",
    "test:script": "ts-node scripts/test.ts",
    "test:nft": "ts-node scripts/test.ts nft",
    "test:vote": "ts-node scripts/test.ts vote",
    "test:vote:loose": "ts-node scripts/test.ts vote:loose",
    "test:swap": "ts-node scripts/test.ts swap",
    "test:swap:loose": "ts-node scripts/test.ts swap:loose",
    "test:uniswap-proxy": "ts-node scripts/test.ts uniswap-proxy",
    "test:uniswap-v3-proxy": "ts-node scripts/test.ts uniswap-v3-proxy",
    "test:uniswap-v2-proxy": "ts-node scripts/test.ts uniswap-v2-proxy",
    "test:ubeswap-proxy": "ts-node scripts/test.ts ubeswap-proxy",
    "test:good-dollar-voter": "ts-node scripts/test.ts good-dollar-voter",
    "test:claim-vote": "ts-node scripts/test.ts claim-vote",
    "test:uniswap-voting": "ts-node scripts/test.ts uniswap-voting",
    "# Utility Commands": "",
    "utils": "ts-node scripts/utils.ts",
    "mint": "ts-node scripts/utils.ts mint",
    "withdraw": "ts-node scripts/utils.ts withdraw",
    "vote": "ts-node scripts/utils.ts vote",
    "view-projects": "ts-node scripts/utils.ts view-projects",
    "view-campaign": "ts-node scripts/utils.ts view-campaign",
    "create-campaign": "ts-node scripts/utils.ts create-campaign",
    "end-campaign": "ts-node scripts/utils.ts end-campaign",
    "get-campaign": "ts-node scripts/utils.ts get-campaign",
    "show-votes": "ts-node scripts/utils.ts show-votes",
    "add-tokens": "ts-node scripts/utils.ts add-tokens",
    "add-providers": "ts-node scripts/utils.ts add-providers",
    "add-sample": "ts-node scripts/utils.ts add-sample",
    "add-custom-sample": "ts-node scripts/utils.ts add-custom-sample",
    "update-winners": "ts-node scripts/utils.ts update-winners",
    "claim-vote": "ts-node scripts/utils.ts claim-vote",
    "get-vote-conversion": "ts-node scripts/utils.ts get-vote-conversion",
    "check-celo-addresses": "ts-node scripts/utils.ts check-celo-addresses",
    "sync:abis": "node sync-abis.js",
    "# V5 Specific Commands": "",
    "v5:test": "ts-node scripts/verify-v5-deployment.ts",
    "v5:deploy:alfajores": "ts-node scripts/deploy-v5-proxy.ts --network alfajores",
    "v5:deploy:celo": "ts-node scripts/deploy-v5-proxy.ts --network celo",
    "v5:deploy:viem:alfajores": "ts-node scripts/deploy-v5-proxy-viem.ts alfajores",
    "v5:deploy:viem:celo": "ts-node scripts/deploy-v5-proxy-viem.ts celo",
    "v5:verify:celo": "ts-node scripts/verify-v5-contracts.ts"
  },
  "author": "olisehgenesis",
  "packageManager": "pnpm@10.11.0+sha512.6540583f41cc5f628eb3d9773ecee802f4f9ef9923cc45b69890fb47991d4b092964694ec3a4f738a420c918a333062c8b925d312f42e4f0c263eb603551f977"
}
